// Code generated by ent-elastic, DO NOT EDIT.

package migrate

import (
	"context"
	"github.com/guihouchang/go-elasticsearch/schema/field"
	"github.com/olivere/elastic"
)

var (
	UserDataMapping = &field.Mapping{
		Name: "user_data",
		Properties: map[string]interface{}{

			"text_tttt": map[string]interface{}{
				"type":            "text",
				"analyzer":        "ik_max_word",
				"search_analyzer": "ik_max_word",
			},

			"keyword_kkkk": map[string]interface{}{
				"type": "keyword",
			},

			"byte_bbbb": map[string]interface{}{
				"type": "byte",
			},

			"short_ssss": map[string]interface{}{
				"type": "short",
			},

			"int_iiii": map[string]interface{}{
				"type": "integer",
			},

			"long_llll": map[string]interface{}{
				"type": "long",
			},

			"float_ffff": map[string]interface{}{
				"type": "float",
			},

			"double_ddddd": map[string]interface{}{
				"type": "double",
			},

			"bool_bbbb": map[string]interface{}{
				"type": "boolean",
			},

			"date_dddd": map[string]interface{}{
				"type":   "date",
				"format": "Y-m-d H:m:s",
			},
		},

		Settings: map[string]interface{}{

			"number_of_replicas": 2,

			"number_of_shards": 1,
		},
	}

	Tables = []*field.Mapping{
		UserDataMapping,
	}
)

type Schema struct {
	client *elastic.Client
}

func NewSchema(client *elastic.Client) *Schema {
	return &Schema{client: client}
}

func (s *Schema) Create(ctx context.Context) error {
	return Create(ctx, s, Tables)
}

func Create(ctx context.Context, s *Schema, mappings []*field.Mapping) error {
	for _, m := range mappings {
		exist, err := s.client.IndexExists(m.Name).Do(ctx)
		if err != nil {
			return err
		}

		if !exist {
			_, err := s.client.CreateIndex(m.Name).BodyJson(m.CreateBody()).Do(ctx)
			if err != nil {
				return err
			}
		} else {
			_, err := s.client.PutMapping().Index(m.Name).BodyJson(m.AlterBody()).Do(ctx)
			return err
		}
	}

	return nil
}
